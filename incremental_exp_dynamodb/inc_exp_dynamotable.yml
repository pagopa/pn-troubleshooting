AWSTemplateFormatVersion: 2010-09-09
Description: Template for day by day incremental export of dynamoDB table

Parameters:
  DynamoDBTableArn:
    Type: String
    Description: Dynamo table Arn
  S3Bucket:
    Type: String
    Description: Bucket Name
  S3Prefix:
    Type: String
    Description: Bucket Prefix
  Prefix:
    Type: String
    Description: String Prefix after S3Prefix
    Default: incremental2024
  KmsDbArn:
    Type: String
    Default: "-"
    Description: Kms key used by table

Conditions:
  HasKmsDbArn: !Not [ !Equals [ !Ref KmsDbArn, '-' ] ]

Resources:
  ExportFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      FunctionName:
        Fn::Sub: lambda-export-table-${S3Prefix}
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          from datetime import datetime
          from datetime import timedelta
          
          def lambda_handler(event, context):
              dynamodb = boto3.client('dynamodb')
              dynamo_table_arn = os.environ['DynamoDBTableArn']
              current_date = datetime.now().strftime('%Y%m%d')
              yesterday_date= (datetime.strptime(current_date, '%Y%m%d') - timedelta(days=1)).strftime('%Y%m%d')
              s3_bucket = os.environ['S3Bucket']
              s3_prefix = os.environ['S3Prefix']
              prefix = os.environ['Prefix']
              s3_full_prefix = s3_prefix + "/" + prefix + "/" + yesterday_date
              now = datetime.now()
              to_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
              from_time = to_time - timedelta(days=1)
              try:
                  dynamodb.export_table_to_point_in_time(
                              TableArn=dynamo_table_arn,
                              S3Bucket=s3_bucket,
                              S3Prefix=s3_full_prefix,
                              ExportFormat='DYNAMODB_JSON',
                              ExportType='INCREMENTAL_EXPORT',
                              IncrementalExportSpecification={
                                  'ExportFromTime': from_time,
                                  'ExportToTime': to_time,
                                  'ExportViewType': 'NEW_IMAGE'
                              }
                          )
              except Exception as e:
                  print(e)

      Environment:
        Variables:
          DynamoDBTableArn:
            Ref: DynamoDBTableArn
          S3Bucket:
            Ref: S3Bucket
          S3Prefix:
            Ref: S3Prefix
          Prefix:
            Ref: Prefix

      Role:
        Fn::GetAtt:
          - ExportRole
          - Arn

  ExportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ExportPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:ExportTableToPointInTime
                Resource:
                  - !Ref DynamoDBTableArn
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
              - 'Fn::If':
                  - HasKmsDbArn
                  - Effect: Allow
                    Action:
                      - "kms:Decrypt"
                    Resource:
                      - !Ref KmsDbArn
                  - !Ref AWS::NoValue

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 5 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExportFunction.Arn
          Id: ExportFunction

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn

  ExportFunctionLogroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy : Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ExportFunction}"
      RetentionInDays: 3